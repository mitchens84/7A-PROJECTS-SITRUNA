import React, { Suspense, useEffect, useState } from 'react';
// Import directly from content-registry.ts (generated by update-content.ts)
import { 
  getModuleByPath, 
  contentModulesConfig, 
  ModuleConfig, 
  getReactComponent, 
  getIframeSrc 
} from './content-registry';
import { useParams } from 'react-router-dom';

const ContentRenderer: React.FC<{ module?: ModuleConfig }> = ({ module }) => {
  const { modulePath } = useParams<{ modulePath: string }>();
  // State will hold ModuleConfig or null
  const [moduleConfig, setModuleConfig] = useState<ModuleConfig | null | undefined>(module); // Use passed module if available
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    console.log('CONTENT DEBUG: Available modules:', contentModulesConfig);
    console.log(`CONTENT DEBUG: Looking for module path: '${modulePath}'`);
    console.log(`[ContentRenderer] useEffect triggered with modulePath: '${modulePath}'`);
    
    // If module prop was passed directly, use that instead of looking up by path
    if (module) {
      console.log(`[ContentRenderer] Using directly passed module:`, module);
      setModuleConfig(module);
      setError(null);
      return;
    }
    
    setError(null); // Reset error on path change
    if (!modulePath) {
      console.log("[ContentRenderer] No modulePath.");
      setError("No content module path specified in URL.");
      setModuleConfig(null); // Explicitly set to null for not found
      return;
    }

    console.log(`[ContentRenderer] Searching for module with path: '${modulePath}'`);
    const foundModuleConfig = getModuleByPath(modulePath);
    console.log(`CONTENT DEBUG: Result of getModuleByPath:`, foundModuleConfig);

    if (foundModuleConfig) {
      console.log(`[ContentRenderer] Found module config:`, foundModuleConfig);
      setModuleConfig(foundModuleConfig);
    } else {
      console.error(`[ContentRenderer] Content module config not found for path: '${modulePath}'.`);
      setError(`Content module not found: ${modulePath}.`);
      setModuleConfig(null); // Explicitly set to null for not found
    }
  }, [modulePath]);

  if (error) {
    return <div className="p-4 text-red-500">Error: {error}</div>;
  }

  // Handle loading state
  if (moduleConfig === undefined) {
    return <div className="p-4">Loading module information...</div>;
  }

  // Handle not found state
  if (moduleConfig === null) {
    return <div className="p-4">Module '<code>{modulePath}</code>' not found. Please ensure it's configured and run <code>npm run update-content</code>.</div>;
  }

  console.log(`[ContentRenderer] Rendering module '${moduleConfig.title}' (type: ${moduleConfig.type})`);

  if (moduleConfig.type === 'iframe') {
    const iframeSrc = getIframeSrc(moduleConfig);
    console.log(`[ContentRenderer] Rendering iframe with src: '${iframeSrc}' (config entryPoint: '${moduleConfig.entryPoint}')`);
    return (
      <iframe
        src={iframeSrc}
        title={moduleConfig.title}
        className="w-full h-full border-0" // Ensure this takes up space, e.g., min-h-screen or specific parent height
        style={{ height: 'calc(100vh - 64px)' }} // Example: Adjust 64px based on your header/nav height
        sandbox="allow-scripts allow-same-origin allow-popups allow-forms"
      />
    );
  }

  if (moduleConfig.type === 'react-component') {
    const Component = getReactComponent(moduleConfig.entryPoint);
    if (!Component) {
      console.error(`[ContentRenderer] React component for '${moduleConfig.title}' (entry: '${moduleConfig.entryPoint}') not found in registry.`);
      return <div className="p-4 text-red-500">React component for '<code>{modulePath}</code>' (entry: <code>{moduleConfig.entryPoint}</code>) not found in registry. Check <code>scripts/update-content.ts</code> generation.</div>;
    }
    console.log(`[ContentRenderer] Rendering React component: '${moduleConfig.title}'`);
    return (
      <Suspense fallback={<div className="p-4">Loading React component...</div>}>
        <Component />
      </Suspense>
    );
  }

  console.error(`[ContentRenderer] Unknown module type or missing component for module: '${moduleConfig.title}'`);
  return <div className="p-4 text-red-500">Cannot render module: Unknown type or missing component.</div>;
};

export default ContentRenderer;
