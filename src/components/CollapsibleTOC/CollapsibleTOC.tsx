import React, { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { TOCItem, reactAppRoutes } from '../../appRoutes';
import staticTocData from '../../toc-static-data.json'; // Generated by script
import { usePersistentState } from '../../hooks/usePersistentState';
import '../../assets/styles.css'; // Ensure styles are imported

interface CollapsibleTOCProps {}

const CollapsibleTOC: React.FC<CollapsibleTOCProps> = () => {
  const [tocItems, setTocItems] = useState<TOCItem[]>([]);
  const [expandedItems, setExpandedItems] = usePersistentState<Record<string, boolean>>(
    'tocExpandedState',
    {},
    'localStorage'
  );
  const location = useLocation();

  useEffect(() => {
    // Combine React app routes and static routes
    const staticItems: TOCItem[] = staticTocData.map((item: any) => ({
      ...item,
      type: 'static',
      // Ensure path is correctly prefixed if necessary, though generate-static-toc.js should handle it
    }));

    // Initialize expanded state for items marked as initially expanded
    const initialExpansion: Record<string, boolean> = {};
    [...reactAppRoutes, ...staticItems].forEach(item => {
      if (item.isInitiallyExpanded) {
        initialExpansion[item.id] = true;
      }
      if (item.children) {
        item.children.forEach(child => {
          if (child.isInitiallyExpanded) {
            initialExpansion[child.id] = true;
          }
        });
      }
    });
    // Merge with existing persistent state, giving preference to initialExpansion for un-set items
    setExpandedItems(prev => ({ ...initialExpansion, ...prev }));

    // For now, let's assume a simple structure. We can enhance this to group static content.
    // Example: Group static content under a specific parent item
    const staticContentParent: TOCItem = {
        id: 'static-content',
        title: 'Static Content (EXPRESS)',
        path: '#', // Not a direct link
        type: 'react', // Treat parent as a non-linkable react type for structure
        children: staticItems,
        isInitiallyExpanded: true, // Or based on some logic
    };

    if (staticItems.length > 0) {
        setTocItems([...reactAppRoutes, staticContentParent]);
    } else {
        setTocItems(reactAppRoutes);
    }

  }, []); // staticTocData will be stable after build

  const toggleExpand = (itemId: string) => {
    setExpandedItems(prev => ({ ...prev, [itemId]: !prev[itemId] }));
  };

  const renderTOCItem = (item: TOCItem, level: number = 0) => {
    const isActive = location.pathname === item.path || (item.type === 'static' && location.pathname.startsWith(import.meta.env.VITE_APP_BASE_URL + item.path));
    const isExpanded = expandedItems[item.id] || false;

    return (
      <li key={item.id} className={`toc-item level-${level} ${isActive ? 'active' : ''}`}>
        <div className="toc-entry">
          {item.children && item.children.length > 0 && (
            <button onClick={() => toggleExpand(item.id)} className="toc-expand-button">
              {isExpanded ? 'âˆ’' : '+'}
            </button>
          )}
          {item.type === 'react' && item.path !== '#' ? (
            <Link to={item.path}>{item.title}</Link>
          ) : item.type === 'static' ? (
            // Vite handles base path for assets in public, ensure this works for HTML files
            // The path from toc-static-data.json should be relative to the public dir
            // e.g., EXPRESS/example-static-site/index.html
            <a href={`${import.meta.env.VITE_APP_BASE_URL}${item.path}`}>{item.title}</a>
          ) : (
            <span>{item.title}</span> // For non-linkable parent items
          )}
        </div>
        {item.children && item.children.length > 0 && isExpanded && (
          <ul className="toc-submenu">
            {item.children.map(child => renderTOCItem(child, level + 1))}
          </ul>
        )}
      </li>
    );
  };

  if (tocItems.length === 0) {
    return <nav className="collapsible-toc"><p>Loading ToC...</p></nav>;
  }

  return (
    <nav className="collapsible-toc">
      <h3>Table of Contents</h3>
      <ul>
        {tocItems.map(item => renderTOCItem(item))}
      </ul>
    </nav>
  );
};

export default CollapsibleTOC;
